setwd("~/Documents/EMATM0061_SCEM/Assignment_2")
setwd("~/Documents/EMATM0061_SCEM/Assignment_2")
knitr::opts_chunk$set(echo = TRUE)
# Import libraries
library(tidyverse)
library(Stat2Data)
# Load Hawks data set
data("Hawks")
# Construct smaller data set by dropping rows with N/A's
hawksSmall <- drop_na(select(Hawks, Age, Day, Month, Year, CaptureTime, Species, Wing, Weight, Tail))
# Use dim() function to find no. of rows and columns
hawksSmallDim <- dim(hawksSmall)
rows <- hawksSmallDim[1] # => 897 rows
cols <- hawksSmallDim[2] # => 9 columns
# Use head() function to display top 5 rows of data frame
hawksSmallHead <- head(hawksSmall)
print.data.frame(head(hawksSmallHead))
# Generate histogram of weights of hawks via ggplot and geom_histogram
ggplot(data = hawksSmall, mapping = aes(x=Weight)) +
geom_histogram(binwidth=10) +
xlab("Weight (gm)") +
ylab("Count")
# Generate a density plot of tail lengths of hawks via ggplot and geom_density
ggplot(data = hawksSmall, mapping = aes(x=Tail)) +
geom_density() +
xlab("Tail (mm)") +
ylab("Density")
# Recreate, but with adjust = 0.5
# (adjust=1.0) is same as original
ggplot(data = hawksSmall, mapping = aes(x=Tail)) +
geom_density(adjust=0.5) +
xlab("Tail (mm)") +
ylab("Density")
ggplot(data = hawksSmall, mapping = aes(x=Tail, color=Species)) +
geom_density(adjust=1.0) +
xlab("Tail (mm)") +
ylab("Density") +
theme_bw()
ggplot(data = hawksSmall, mapping = aes(x=Tail, y=Species, fill = Species)) +
geom_violin() +
xlab("Tail (mm)") +
ylab("Species") +
theme_bw()
ggplot(data = hawksSmall, mapping = aes(x=Tail, y=Weight, color=Species, shape=Species)) +
geom_point() +
xlab("Tail (mm)") +
ylab("Weight (gm)") +
theme_bw()
# Extract maximum data for annotation
heaviest_halk <- max(filter(hawksSmall)$Weight, na.rm = TRUE)
ggplot(data = hawksSmall, mapping = aes(x=Tail, y=Weight, color=Species)) +
geom_point() +
geom_smooth(formula = y ~ x, method="lm") +
facet_wrap(~Species, scales="free") +
xlab("Tail (mm)") +
ylab("Weight (gm)") +
theme_bw() +
geom_text(x=204.5, y=1940, label=paste("Heaviest halk weighs", heaviest_halk, "g"), show.legend=FALSE, size=3.1, color="black")
# Create hSF data frame containing "Wing", "Weight", "Tail" columns, with rows belonging to species of Red-Tailed Hawks (RT) and weight >= 1kg
hSF <- hawksSmall %>%
filter(Species == "RT" & Weight >= 1000) %>%
select(Wing, Weight, Tail)
print.data.frame(head(hSF))
# Use arrange function to sort hSF so rows appear in increasing order of wing span
rearranged_hSF <- arrange(hSF, Wing)
print.data.frame(head(rearranged_hSF))
# Create species code to full name correspondence data frame
species_code <- c("CH", "RT", "SS")
species_name_full <- c("Cooper's", "Red-tailed", "Sharp-shinned")
species_correspondence <- data.frame(species_code, species_name_full)
print.data.frame(species_correspondence)
# Create a new data frame (hawksFullName), which is same as Hawks, except that Species contains full name rather than two letter codes
# Note: we take Hawks data frame, rename Species to species_code to facilitate (left) join, then rename species_name_full to Species, and finally remove the species_code column
hawksFullName <- Hawks %>%
rename(species_code = Species) %>%
left_join(species_correspondence) %>%
rename(Species = species_name_full) %>%
select(-species_code)
print.data.frame(head(select(hawksFullName, Species, Wing, Weight), 7))
hawksWithBMI <- Hawks %>%
mutate(bird_BMI = 1000 * Weight/Wing**2) %>%
select(Species, bird_BMI) %>%
arrange(desc(bird_BMI))
print.data.frame(head(hawksWithBMI, 8))
filtered_hawksWithBMI <- filter(hawksWithBMI, bird_BMI < 100)
ggplot(data = filtered_hawksWithBMI, mapping = aes(x=bird_BMI, y=Species, fill=Species)) +
geom_violin() +
xlab("Bird BMI") +
ylab("Species") +
theme_bw()
# Create a summary table (using summarize, groupby), broken down by Hawk species containing following quantities:
# Number of rows
# Mean average wing span in cm
# Median wing span in cm
# Trimmed mean average wing span in centimeters (trim=0.1)
# Mean average of the ratio between wing span and tail length
# Note: we need to divide values by 10 to get cm, as in mm by default
hawksFullName %>%
group_by(Species) %>%
summarize (
num_rows=n(), mn_wing=mean(Wing/10, na.rm=TRUE), md_wing=median(Wing/10, na.rm=TRUE), t_mn_wing=mean(Wing/10, na.rm=TRUE, trim=0.1), tail_wing_ratio = mean(Wing/Tail, na.rm=TRUE)
)
# Then create summary table of following form:
# No. of missing values broken down by species, for specified columns
hawksFullName %>%
select(Species, Wing, Weight, Culmen, Hallux, Tail, StandardTail, Tarsus, Crop) %>%
group_by(Species) %>%
summarize(across(everything(), ~sum(is.na(.x))))
# Compute sample mean, sample median, and trimmed sample mean (with q = 0.1)
Hawks %>%
summarise(
Wing_mean=mean(Wing, na.rm=TRUE), Wing_t_mean=mean(Wing, na.rm=TRUE, trim=0.1), Wing_med=median(Wing, na.rm=TRUE), Weight_mean=mean(Weight, na.rm=TRUE), Weight_t_mean=mean(Weight, na.rm=TRUE, trim=0.1), Weight_med=median(Weight, na.rm=TRUE)
)
# Combining with group_by for species break down
Hawks %>%
group_by(Species) %>%
summarise(
Wing_mean=mean(Wing, na.rm=TRUE), Wing_t_mean=mean(Wing, na.rm=TRUE, trim=0.1), Wing_med=median(Wing, na.rm=TRUE), Weight_mean=mean(Weight, na.rm=TRUE), Weight_t_mean=mean(Weight, na.rm=TRUE, trim=0.1), Weight_med=median(Weight, na.rm=TRUE)
)
# Begin by exxtracting vector of hallux lengths without means
hal <- Hawks$Hallux
hal <- hal[!is.na(hal)]
# Generate new vector (corrupted_hal) with 10 outliers, each of value 100, to investigate effect of outliers
outlier_val <- 100
num_outliers <- 10
corrupted_hal <- c(hal, rep(outlier_val, times=num_outliers))
# Compute mean of original and corrupted
mean(hal) # 26.41086
mean(corrupted_hal) # 27.21776
# Already, corrupted mean shifted slightly higher (positive skew)
# Now investigate what happens with more outliers (increasing from 0 to 1000)
num_outliers_vect <- seq(0, 1000)
means_vect <- c()
t_means_vect <- c()
medians_vect <- c()
for (num_ouliers in num_outliers_vect) {
corrupted_hal <- c(hal, rep(outlier_val, times=num_ouliers))
means_vect <- c(means_vect, mean(corrupted_hal))
t_means_vect <- c(t_means_vect, mean(corrupted_hal, trim=0.1))
medians_vect <- c(medians_vect, median(corrupted_hal))
}
df_means_medians <- data.frame(num_outliers=num_outliers_vect, mean=means_vect, t_mean=t_means_vect, median=medians_vect)
df_means_medians %>%
pivot_longer(!num_outliers, names_to = "Estimator", values_to = "Value") %>%
ggplot( aes(x=num_outliers, color=Estimator, linetype=Estimator, y=Value)) +
geom_line() + xlab("Number of outliers")
ggplot(data = Hawks, mapping = aes(x=Species, y=Weight)) +
geom_boxplot()
num_outliers <- function(X) {
# This function takes in a sample, X, and outputs the number of outliers
# Calculate the upper and lower quartile, and IQR
q75 <- quantile(X, 0.75, na.rm=TRUE)
q25 <- quantile(X, 0.25, na.rm=TRUE)
IQ_Range <- q75 - q25
# Find upper and lower bounds for X
X_upper <- q75 + 1.5 * IQ_Range
X_lower <- q25 - 1.5 * IQ_Range
# Find all outliers
outliers <- X[(X > X_upper) | (X < X_lower)]
# Find number of outliers by counting non-na items
num_of_outliers <- sum(!is.na(outliers))
return(num_of_outliers)
}
# Find number of outliers for one-off example
# num_outliers(filter(Hawks, Species=="SS")$Weight)
# Find summary of outliers for weight
Hawks %>%
group_by(Species) %>%
summarise(
num_outliers_weight = num_outliers(Weight)
)
setwd("~/Documents/EMATM0061_SCEM/Assignment_2")
knitr::opts_chunk$set(echo = TRUE)
# Import libraries
library(tidyverse)
library(Stat2Data)
# Load Hawks data set
data("Hawks")
# Construct smaller data set by dropping rows with N/A's
hawksSmall <- drop_na(select(Hawks, Age, Day, Month, Year, CaptureTime, Species, Wing, Weight, Tail))
# Use dim() function to find no. of rows and columns
hawksSmallDim <- dim(hawksSmall)
rows <- hawksSmallDim[1] # => 897 rows
cols <- hawksSmallDim[2] # => 9 columns
# Use head() function to display top 5 rows of data frame
hawksSmallHead <- head(hawksSmall)
print.data.frame(head(hawksSmallHead))
# Generate histogram of weights of hawks via ggplot and geom_histogram
ggplot(data = hawksSmall, mapping = aes(x=Weight)) +
geom_histogram(binwidth=10) +
xlab("Weight (gm)") +
ylab("Count")
# Generate a density plot of tail lengths of hawks via ggplot and geom_density
ggplot(data = hawksSmall, mapping = aes(x=Tail)) +
geom_density() +
xlab("Tail (mm)") +
ylab("Density")
# Recreate, but with adjust = 0.5
# (adjust=1.0) is same as original
ggplot(data = hawksSmall, mapping = aes(x=Tail)) +
geom_density(adjust=0.5) +
xlab("Tail (mm)") +
ylab("Density")
ggplot(data = hawksSmall, mapping = aes(x=Tail, color=Species)) +
geom_density(adjust=1.0) +
xlab("Tail (mm)") +
ylab("Density") +
theme_bw()
ggplot(data = hawksSmall, mapping = aes(x=Tail, y=Species, fill = Species)) +
geom_violin() +
xlab("Tail (mm)") +
ylab("Species") +
theme_bw()
ggplot(data = hawksSmall, mapping = aes(x=Tail, y=Weight, color=Species, shape=Species)) +
geom_point() +
xlab("Tail (mm)") +
ylab("Weight (gm)") +
theme_bw()
# Extract maximum data for annotation
heaviest_halk <- max(filter(hawksSmall)$Weight, na.rm = TRUE)
ggplot(data = hawksSmall, mapping = aes(x=Tail, y=Weight, color=Species)) +
geom_point() +
geom_smooth(formula = y ~ x, method="lm") +
facet_wrap(~Species, scales="free") +
xlab("Tail (mm)") +
ylab("Weight (gm)") +
theme_bw() +
geom_text(x=204.5, y=1940, label=paste("Heaviest halk weighs", heaviest_halk, "g"), show.legend=FALSE, size=3.1, color="black")
# Create hSF data frame containing "Wing", "Weight", "Tail" columns, with rows belonging to species of Red-Tailed Hawks (RT) and weight >= 1kg
hSF <- hawksSmall %>%
filter(Species == "RT" & Weight >= 1000) %>%
select(Wing, Weight, Tail)
print.data.frame(head(hSF))
# Use arrange function to sort hSF so rows appear in increasing order of wing span
rearranged_hSF <- arrange(hSF, Wing)
print.data.frame(head(rearranged_hSF))
# Create species code to full name correspondence data frame
species_code <- c("CH", "RT", "SS")
species_name_full <- c("Cooper's", "Red-tailed", "Sharp-shinned")
species_correspondence <- data.frame(species_code, species_name_full)
print.data.frame(species_correspondence)
# Create a new data frame (hawksFullName), which is same as Hawks, except that Species contains full name rather than two letter codes
# Note: we take Hawks data frame, rename Species to species_code to facilitate (left) join, then rename species_name_full to Species, and finally remove the species_code column
hawksFullName <- Hawks %>%
rename(species_code = Species) %>%
left_join(species_correspondence) %>%
rename(Species = species_name_full) %>%
select(-species_code)
print.data.frame(head(select(hawksFullName, Species, Wing, Weight), 7))
hawksWithBMI <- Hawks %>%
mutate(bird_BMI = 1000 * Weight/Wing**2) %>%
select(Species, bird_BMI) %>%
arrange(desc(bird_BMI))
print.data.frame(head(hawksWithBMI, 8))
filtered_hawksWithBMI <- filter(hawksWithBMI, bird_BMI < 100)
ggplot(data = filtered_hawksWithBMI, mapping = aes(x=bird_BMI, y=Species, fill=Species)) +
geom_violin() +
xlab("Bird BMI") +
ylab("Species") +
theme_bw()
# Create a summary table (using summarize, groupby), broken down by Hawk species containing following quantities:
# Number of rows
# Mean average wing span in cm
# Median wing span in cm
# Trimmed mean average wing span in centimeters (trim=0.1)
# Mean average of the ratio between wing span and tail length
# Note: we need to divide values by 10 to get cm, as in mm by default
hawksFullName %>%
group_by(Species) %>%
summarize (
num_rows=n(), mn_wing=mean(Wing/10, na.rm=TRUE), md_wing=median(Wing/10, na.rm=TRUE), t_mn_wing=mean(Wing/10, na.rm=TRUE, trim=0.1), tail_wing_ratio = mean(Wing/Tail, na.rm=TRUE)
)
# Then create summary table of following form:
# No. of missing values broken down by species, for specified columns
hawksFullName %>%
select(Species, Wing, Weight, Culmen, Hallux, Tail, StandardTail, Tarsus, Crop) %>%
group_by(Species) %>%
summarize(across(everything(), ~sum(is.na(.x))))
# Compute sample mean, sample median, and trimmed sample mean (with q = 0.1)
Hawks %>%
summarise(
Wing_mean=mean(Wing, na.rm=TRUE), Wing_t_mean=mean(Wing, na.rm=TRUE, trim=0.1), Wing_med=median(Wing, na.rm=TRUE), Weight_mean=mean(Weight, na.rm=TRUE), Weight_t_mean=mean(Weight, na.rm=TRUE, trim=0.1), Weight_med=median(Weight, na.rm=TRUE)
)
# Combining with group_by for species break down
Hawks %>%
group_by(Species) %>%
summarise(
Wing_mean=mean(Wing, na.rm=TRUE), Wing_t_mean=mean(Wing, na.rm=TRUE, trim=0.1), Wing_med=median(Wing, na.rm=TRUE), Weight_mean=mean(Weight, na.rm=TRUE), Weight_t_mean=mean(Weight, na.rm=TRUE, trim=0.1), Weight_med=median(Weight, na.rm=TRUE)
)
# Begin by exxtracting vector of hallux lengths without means
hal <- Hawks$Hallux
hal <- hal[!is.na(hal)]
# Generate new vector (corrupted_hal) with 10 outliers, each of value 100, to investigate effect of outliers
outlier_val <- 100
num_outliers <- 10
corrupted_hal <- c(hal, rep(outlier_val, times=num_outliers))
# Compute mean of original and corrupted
mean(hal) # 26.41086
mean(corrupted_hal) # 27.21776
# Already, corrupted mean shifted slightly higher (positive skew)
# Now investigate what happens with more outliers (increasing from 0 to 1000)
num_outliers_vect <- seq(0, 1000)
means_vect <- c()
t_means_vect <- c()
medians_vect <- c()
for (num_ouliers in num_outliers_vect) {
corrupted_hal <- c(hal, rep(outlier_val, times=num_ouliers))
means_vect <- c(means_vect, mean(corrupted_hal))
t_means_vect <- c(t_means_vect, mean(corrupted_hal, trim=0.1))
medians_vect <- c(medians_vect, median(corrupted_hal))
}
df_means_medians <- data.frame(num_outliers=num_outliers_vect, mean=means_vect, t_mean=t_means_vect, median=medians_vect)
df_means_medians %>%
pivot_longer(!num_outliers, names_to = "Estimator", values_to = "Value") %>%
ggplot( aes(x=num_outliers, color=Estimator, linetype=Estimator, y=Value)) +
geom_line() + xlab("Number of outliers")
ggplot(data = Hawks, mapping = aes(x=Species, y=Weight)) +
geom_boxplot()
num_outliers <- function(X) {
# This function takes in a sample, X, and outputs the number of outliers
# Calculate the upper and lower quartile, and IQR
q75 <- quantile(X, 0.75, na.rm=TRUE)
q25 <- quantile(X, 0.25, na.rm=TRUE)
IQ_Range <- q75 - q25
# Find upper and lower bounds for X
X_upper <- q75 + 1.5 * IQ_Range
X_lower <- q25 - 1.5 * IQ_Range
# Find all outliers
outliers <- X[(X > X_upper) | (X < X_lower)]
# Find number of outliers by counting non-na items
num_of_outliers <- sum(!is.na(outliers))
return(num_of_outliers)
}
# Find number of outliers for one-off example
# num_outliers(filter(Hawks, Species=="SS")$Weight)
# Find summary of outliers for weight
Hawks %>%
group_by(Species) %>%
summarise(
num_outliers_weight = num_outliers(Weight)
)
setwd("~/Documents/GitHub/EMATM0061_SCEM/Assignment_2")
setwd("~/Documents/GitHub/EMATM0061_SCEM/Assignment_2")
knitr::opts_chunk$set(echo = TRUE)
# Import libraries
library(tidyverse)
library(Stat2Data)
# Load Hawks data set
data("Hawks")
# Construct smaller data set by dropping rows with N/A's
hawksSmall <- drop_na(select(Hawks, Age, Day, Month, Year, CaptureTime, Species, Wing, Weight, Tail))
# Use dim() function to find no. of rows and columns
hawksSmallDim <- dim(hawksSmall)
rows <- hawksSmallDim[1] # => 897 rows
cols <- hawksSmallDim[2] # => 9 columns
# Use head() function to display top 5 rows of data frame
hawksSmallHead <- head(hawksSmall)
print.data.frame(head(hawksSmallHead))
# Generate histogram of weights of hawks via ggplot and geom_histogram
ggplot(data = hawksSmall, mapping = aes(x=Weight)) +
geom_histogram(binwidth=10) +
xlab("Weight (gm)") +
ylab("Count")
# Generate a density plot of tail lengths of hawks via ggplot and geom_density
ggplot(data = hawksSmall, mapping = aes(x=Tail)) +
geom_density() +
xlab("Tail (mm)") +
ylab("Density")
# Recreate, but with adjust = 0.5
# (adjust=1.0) is same as original
ggplot(data = hawksSmall, mapping = aes(x=Tail)) +
geom_density(adjust=0.5) +
xlab("Tail (mm)") +
ylab("Density")
ggplot(data = hawksSmall, mapping = aes(x=Tail, color=Species)) +
geom_density(adjust=1.0) +
xlab("Tail (mm)") +
ylab("Density") +
theme_bw()
ggplot(data = hawksSmall, mapping = aes(x=Tail, y=Species, fill = Species)) +
geom_violin() +
xlab("Tail (mm)") +
ylab("Species") +
theme_bw()
ggplot(data = hawksSmall, mapping = aes(x=Tail, y=Weight, color=Species, shape=Species)) +
geom_point() +
xlab("Tail (mm)") +
ylab("Weight (gm)") +
theme_bw()
# Extract maximum data for annotation
heaviest_halk <- max(filter(hawksSmall)$Weight, na.rm = TRUE)
ggplot(data = hawksSmall, mapping = aes(x=Tail, y=Weight, color=Species)) +
geom_point() +
geom_smooth(formula = y ~ x, method="lm") +
facet_wrap(~Species, scales="free") +
xlab("Tail (mm)") +
ylab("Weight (gm)") +
theme_bw() +
geom_text(x=204.5, y=1940, label=paste("Heaviest halk weighs", heaviest_halk, "g"), show.legend=FALSE, size=3.1, color="black")
# Create hSF data frame containing "Wing", "Weight", "Tail" columns, with rows belonging to species of Red-Tailed Hawks (RT) and weight >= 1kg
hSF <- hawksSmall %>%
filter(Species == "RT" & Weight >= 1000) %>%
select(Wing, Weight, Tail)
print.data.frame(head(hSF))
# Use arrange function to sort hSF so rows appear in increasing order of wing span
rearranged_hSF <- arrange(hSF, Wing)
print.data.frame(head(rearranged_hSF))
# Create species code to full name correspondence data frame
species_code <- c("CH", "RT", "SS")
species_name_full <- c("Cooper's", "Red-tailed", "Sharp-shinned")
species_correspondence <- data.frame(species_code, species_name_full)
print.data.frame(species_correspondence)
# Create a new data frame (hawksFullName), which is same as Hawks, except that Species contains full name rather than two letter codes
# Note: we take Hawks data frame, rename Species to species_code to facilitate (left) join, then rename species_name_full to Species, and finally remove the species_code column
hawksFullName <- Hawks %>%
rename(species_code = Species) %>%
left_join(species_correspondence) %>%
rename(Species = species_name_full) %>%
select(-species_code)
print.data.frame(head(select(hawksFullName, Species, Wing, Weight), 7))
hawksWithBMI <- Hawks %>%
mutate(bird_BMI = 1000 * Weight/Wing**2) %>%
select(Species, bird_BMI) %>%
arrange(desc(bird_BMI))
print.data.frame(head(hawksWithBMI, 8))
filtered_hawksWithBMI <- filter(hawksWithBMI, bird_BMI < 100)
ggplot(data = filtered_hawksWithBMI, mapping = aes(x=bird_BMI, y=Species, fill=Species)) +
geom_violin() +
xlab("Bird BMI") +
ylab("Species") +
theme_bw()
# Create a summary table (using summarize, groupby), broken down by Hawk species containing following quantities:
# Number of rows
# Mean average wing span in cm
# Median wing span in cm
# Trimmed mean average wing span in centimeters (trim=0.1)
# Mean average of the ratio between wing span and tail length
# Note: we need to divide values by 10 to get cm, as in mm by default
hawksFullName %>%
group_by(Species) %>%
summarize (
num_rows=n(), mn_wing=mean(Wing/10, na.rm=TRUE), md_wing=median(Wing/10, na.rm=TRUE), t_mn_wing=mean(Wing/10, na.rm=TRUE, trim=0.1), tail_wing_ratio = mean(Wing/Tail, na.rm=TRUE)
)
# Then create summary table of following form:
# No. of missing values broken down by species, for specified columns
hawksFullName %>%
select(Species, Wing, Weight, Culmen, Hallux, Tail, StandardTail, Tarsus, Crop) %>%
group_by(Species) %>%
summarize(across(everything(), ~sum(is.na(.x))))
# Compute sample mean, sample median, and trimmed sample mean (with q = 0.1)
Hawks %>%
summarise(
Wing_mean=mean(Wing, na.rm=TRUE), Wing_t_mean=mean(Wing, na.rm=TRUE, trim=0.1), Wing_med=median(Wing, na.rm=TRUE), Weight_mean=mean(Weight, na.rm=TRUE), Weight_t_mean=mean(Weight, na.rm=TRUE, trim=0.1), Weight_med=median(Weight, na.rm=TRUE)
)
# Combining with group_by for species break down
Hawks %>%
group_by(Species) %>%
summarise(
Wing_mean=mean(Wing, na.rm=TRUE), Wing_t_mean=mean(Wing, na.rm=TRUE, trim=0.1), Wing_med=median(Wing, na.rm=TRUE), Weight_mean=mean(Weight, na.rm=TRUE), Weight_t_mean=mean(Weight, na.rm=TRUE, trim=0.1), Weight_med=median(Weight, na.rm=TRUE)
)
# Begin by exxtracting vector of hallux lengths without means
hal <- Hawks$Hallux
hal <- hal[!is.na(hal)]
# Generate new vector (corrupted_hal) with 10 outliers, each of value 100, to investigate effect of outliers
outlier_val <- 100
num_outliers <- 10
corrupted_hal <- c(hal, rep(outlier_val, times=num_outliers))
# Compute mean of original and corrupted
mean(hal) # 26.41086
mean(corrupted_hal) # 27.21776
# Already, corrupted mean shifted slightly higher (positive skew)
# Now investigate what happens with more outliers (increasing from 0 to 1000)
num_outliers_vect <- seq(0, 1000)
means_vect <- c()
t_means_vect <- c()
medians_vect <- c()
for (num_ouliers in num_outliers_vect) {
corrupted_hal <- c(hal, rep(outlier_val, times=num_ouliers))
means_vect <- c(means_vect, mean(corrupted_hal))
t_means_vect <- c(t_means_vect, mean(corrupted_hal, trim=0.1))
medians_vect <- c(medians_vect, median(corrupted_hal))
}
df_means_medians <- data.frame(num_outliers=num_outliers_vect, mean=means_vect, t_mean=t_means_vect, median=medians_vect)
df_means_medians %>%
pivot_longer(!num_outliers, names_to = "Estimator", values_to = "Value") %>%
ggplot( aes(x=num_outliers, color=Estimator, linetype=Estimator, y=Value)) +
geom_line() + xlab("Number of outliers")
ggplot(data = Hawks, mapping = aes(x=Species, y=Weight)) +
geom_boxplot()
num_outliers <- function(X) {
# This function takes in a sample, X, and outputs the number of outliers
# Calculate the upper and lower quartile, and IQR
q75 <- quantile(X, 0.75, na.rm=TRUE)
q25 <- quantile(X, 0.25, na.rm=TRUE)
IQ_Range <- q75 - q25
# Find upper and lower bounds for X
X_upper <- q75 + 1.5 * IQ_Range
X_lower <- q25 - 1.5 * IQ_Range
# Find all outliers
outliers <- X[(X > X_upper) | (X < X_lower)]
# Find number of outliers by counting non-na items
num_of_outliers <- sum(!is.na(outliers))
return(num_of_outliers)
}
# Find number of outliers for one-off example
# num_outliers(filter(Hawks, Species=="SS")$Weight)
# Find summary of outliers for weight
Hawks %>%
group_by(Species) %>%
summarise(
num_outliers_weight = num_outliers(Weight)
)
